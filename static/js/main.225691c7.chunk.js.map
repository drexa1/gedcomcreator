{"version":3,"sources":["download-templates.tsx","instructions-popup-arrow.tsx","instructions-popup-content.tsx","instructions-popup.tsx","instructions-section.tsx","upload-dropzone.tsx","app.tsx","index.tsx"],"names":["resources","es","resources_es","pl","resources_pl","Arrow","_ref","direction","onClick","onMouseDown","onMouseUp","hidden","arrowClass","svgPath","_jsx","className","children","width","height","viewBox","d","stroke","strokeWidth","fill","strokeLinecap","strokeLinejoin","InstructionsContent","currentIndex","totalCards","_jsxs","Header","as","Array","from","length","map","_","index","InstructionsPopup","forwardRef","ref","isOpen","setOpen","useState","isClicked","setIsClicked","setCurrentIndex","useEffect","nextSlide","prevSlide","handleMouseDown","handleMouseUp","swipeHandlers","useSwipeable","onSwipedLeft","onSwipedRight","preventScrollOnSwipe","trackMouse","useImperativeHandle","open","Modal","onClose","InstructionsSection","showMessage","instructionsRef","FormattedMessage","id","defaultMessage","_resources$language$t","_resources$language","templatesFileName","language","fetch","then","response","blob","_resources$language$i","_resources$language2","_resources$language$p","_resources$language3","_resources$language$r","_resources$language4","saveAs","type","header","text","_Fragment","catch","error","console","downloadTemplates","_instructionsRef$curr","current","UploadDropzone","files","setFiles","fileInputRef","useRef","handleFiles","newFiles","handleUploadClick","_fileInputRef$current","click","onDrop","event","preventDefault","dataTransfer","onDragOver","e","multiple","onChange","target","style","display","Button","Icon","name","primary","disabled","App","message","setMessage","messageVisible","setMessageVisible","Message","info","positive","negative","onDismiss","msg","messages","messages_es","messages_pl","navigator","split","ReactDOM","createRoot","document","getElementById","render","IntlProvider","locale"],"mappings":"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","file":"static/js/main.225691c7.chunk.js","sourcesContent":["import {saveAs} from 'file-saver';\nimport {FormattedMessage} from 'react-intl';\nimport resources_es from \"./i18n/resources/es.json\";\nimport resources_pl from \"./i18n/resources/pl.json\";\nimport language from \"./index\";\nimport {MessageState} from \"./app\";\n\nconst resources = {\n    es: resources_es,\n    pl: resources_pl\n};\n\nexport const downloadTemplates = ({ showMessage }: { showMessage: (msg: MessageState) => void; }) => {\n    const templatesFileName = resources[language]?.[\"templates.zip\"] ?? \"templates.zip\";\n    const templatesFilePath = `${process.env.PUBLIC_URL}/templates/${language}/${templatesFileName}`;\n    fetch(templatesFilePath)\n        .then((response) => response.blob())\n        .then((blob) => {\n            saveAs(blob, templatesFileName);\n            showMessage({\n                type: \"positive\",\n                header: (\n                    <FormattedMessage\n                        id=\"instructions.templates.downloaded\"\n                        defaultMessage=\"Review your Downloads folder\"/>\n                ),\n                text: (\n                    <>\n                        <FormattedMessage\n                            id=\"instructions.templates.compressed\"\n                            defaultMessage=\"You will find the assets.templates in the compressed file:\"/>&nbsp;\n                        <span>{resources[language]?.[\"individuals.csv\"] ?? \"1-individuals.csv\"}</span>,&nbsp;\n                        <span>{resources[language]?.[\"parents.csv\"] ?? \"2-parents.csv\"}</span>,&nbsp;\n                        <span>{resources[language]?.[\"relationships.csv\"] ?? \"3-relationships.csv\"}</span>\n                    </>\n                )\n            });\n        })\n        .catch((error) => console.error(\"Download failed:\", error));\n};\n","import React from \"react\";\n\ninterface ArrowProps {\n    direction: \"left\" | \"right\";\n    onClick: () => void;\n    onMouseDown: () => void;\n    onMouseUp: () => void;\n    hidden: boolean;\n}\n\nexport const Arrow: React.FC<ArrowProps> = ({ direction, onClick, onMouseDown, onMouseUp, hidden }) => {\n    const arrowClass = direction === \"left\" ? \"left-arrow\" : \"right-arrow\";\n    const svgPath = direction === \"left\" ? \"M15 4l-8 20 8 20\" : \"M9 4l8 20-8 20\";\n    return (\n        <div className={`arrow ${arrowClass} ${hidden ? \"hidden\" : \"\"}`}\n            onClick={onClick}\n            onMouseDown={onMouseDown}\n            onMouseUp={onMouseUp}>\n            <svg width=\"80\" height=\"100%\" viewBox=\"0 0 24 48\">\n                <path\n                    d={svgPath}\n                    stroke=\"lightgray\"\n                    strokeWidth=\"2\"\n                    fill=\"none\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                />\n            </svg>\n        </div>\n    );\n};","import React from \"react\";\nimport { Header } from \"semantic-ui-react\";\n\ninterface InstructionsContentProps {\n    currentIndex: number;\n    totalCards: number;\n}\n\nexport const InstructionsContent: React.FC<InstructionsContentProps> = ({ currentIndex, totalCards }) => {\n    return (\n        <div className=\"carousel-content\">\n            <Header as=\"h1\">Card {currentIndex + 1} Header</Header>\n            <div className=\"carousel-body\">\n                This is the content of card {currentIndex + 1}\n            </div>\n            <div className=\"dots-container\">\n                {Array.from({ length: totalCards }).map((_, index) => (\n                    <span\n                        key={index}\n                        className={`dot ${index === currentIndex ? \"active\" : \"\"}`}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n","import {forwardRef, useEffect, useImperativeHandle, useState} from \"react\";\nimport {Header, Modal} from \"semantic-ui-react\";\nimport { useSwipeable } from \"react-swipeable\";\nimport {Arrow} from \"./instructions-popup-arrow\";\nimport {InstructionsContent} from \"./instructions-popup-content\";\n\nexport const InstructionsPopup = forwardRef((_, ref) => {\n    const [isOpen, setOpen] = useState<boolean>(false);\n    const [isClicked, setIsClicked] = useState(false);\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const totalCards = 4;\n\n    useEffect(() => {\n        if (isOpen) {\n            setCurrentIndex(0); // Reset slide index to 0 whenever the modal opens\n        }\n    }, [isOpen]);\n\n    const nextSlide = () => {\n        if (currentIndex < totalCards - 1) {\n            setCurrentIndex(currentIndex + 1);\n        }\n    };\n\n    const prevSlide = () => {\n        if (currentIndex > 0) {\n            setCurrentIndex(currentIndex - 1);\n        }\n    };\n\n    // Handle click feedback\n    const handleMouseDown = () => setIsClicked(true);\n    const handleMouseUp = () => setIsClicked(false);\n\n    const swipeHandlers = useSwipeable({\n        onSwipedLeft: nextSlide,    // Swipe left to go to the next slide\n        onSwipedRight: prevSlide,   // Swipe right to go back\n        preventScrollOnSwipe: true, // Prevents scrolling while swiping\n        trackMouse: true            // Allows swipe on desktop too\n    });\n\n    // Exposing the `open` method to parent component via the ref\n    useImperativeHandle(ref, () => ({\n        open: () => setOpen(true),\n    }));\n\n    return (\n        <Modal open={isOpen} onClose={() => setOpen(false)} className=\"instructions-popup\">\n            <div className=\"carousel-wrapper\" {...swipeHandlers}>\n                {/* Left Arrow */}\n                <Arrow direction=\"left\" onClick={prevSlide} onMouseDown={handleMouseDown} onMouseUp={handleMouseUp} hidden={currentIndex === 0}/>\n\n                {/* Main Content */}\n                <InstructionsContent currentIndex={currentIndex} totalCards={totalCards} />\n\n                {/* Right Arrow */}\n                <Arrow direction=\"right\" onClick={nextSlide} onMouseDown={handleMouseDown} onMouseUp={handleMouseUp} hidden={currentIndex === totalCards - 1}/>\n            </div>\n        </Modal>\n    );\n});\n","import React, {forwardRef, Ref, RefObject} from \"react\";\nimport {FormattedMessage} from \"react-intl\";\nimport {MessageState} from \"./app\";\nimport {downloadTemplates} from \"./download-templates\";\nimport {InstructionsPopup} from \"./instructions-popup\";\n\nexport const InstructionsSection = forwardRef(\n    (\n        { showMessage, instructionsRef}: {\n            showMessage: (msg: MessageState) => void;\n            instructionsRef: RefObject<{open: () => void}>;\n        },\n        ref: Ref<HTMLDivElement>\n    ) => {\n        return (\n        // INSTRUCTIONS SECTION ----------------------------------------------------------------------------------------\n        <div className=\"instructions-wrapper\" ref={ref}>\n                <h2><FormattedMessage id=\"instructions.h2\" defaultMessage=\"How the tool works\" /></h2>\n                <div className=\"instructions-container\">\n                    <div className=\"instruction-box\" onClick={() => downloadTemplates({ showMessage })}>\n                        <h3><FormattedMessage id=\"instructions.download.h3\" defaultMessage=\"Download\"/></h3>\n                        <p>\n                            <FormattedMessage\n                                id=\"instructions.download.p\"\n                                defaultMessage=\"Get here the assets.templates to fill-in. You need: individuals, parents, and relationships.\"/>\n                        </p>\n                    </div>\n                    <div className=\"instruction-box\" onClick={() => instructionsRef.current?.open()}>\n                        <h3><FormattedMessage id=\"instructions.fill-in.h3\" defaultMessage=\"Fill-in\" /></h3>\n                        <p>\n                            <FormattedMessage\n                                id=\"instructions.fill-in.p\"\n                                defaultMessage=\"Fill-in each template with the family records. Check here if you have doubts.\"/>\n                        </p>\n                    </div>\n                    <InstructionsPopup ref={instructionsRef} />\n                    <div className=\"instruction-box\">\n                        <h3><FormattedMessage id=\"instructions.collect.h3\" defaultMessage=\"Collect\" /></h3>\n                        <p>\n                            <FormattedMessage\n                                id=\"instructions.collect.p\"\n                                defaultMessage=\"Collect your family file so you can visualize it anywhere. Know no one? Check this.\"/>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n);\n","import React, {ChangeEvent, DragEvent, useRef, useState} from \"react\";\nimport {FormattedMessage} from \"react-intl\";\nimport {Button, Icon} from \"semantic-ui-react\";\n\nexport const UploadDropzone = () => {\n    const [files, setFiles] = useState<File[]>([]);\n    const fileInputRef = useRef<HTMLInputElement | null>(null);\n\n    const handleUploadClick = () => {\n        fileInputRef.current?.click();\n    };\n\n    const handleUploadDrop = (event: DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n        handleFiles(event.dataTransfer.files);\n    };\n\n    const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n        handleFiles(event.target.files);\n    };\n\n    const handleFiles = (newFiles: FileList | null) => {\n        if (newFiles) {\n            setFiles([...files, ...Array.from(newFiles)]);\n        }\n    };\n\n    return (\n        <div className=\"ui upload-container\">\n            <div\n                className=\"ui dropzone\"\n                onClick={handleUploadClick}\n                onDrop={handleUploadDrop}\n                onDragOver={(e) => e.preventDefault()}>\n                <input\n                    type=\"file\"\n                    multiple\n                    ref={fileInputRef}\n                    onChange={handleFileChange}\n                    style={{ display: \"none\" }}\n                />\n                <p>\n                    <FormattedMessage id=\"dropzone.p.drag-n-drop\" defaultMessage=\"Drag & drop here your filled assets.templates, or \" />\n                    <span><FormattedMessage id=\"dropzone.p.browse-them\" defaultMessage=\"browse them\" /></span>\n                </p>\n                <p><FormattedMessage id=\"dropzone.p.files-needed\" defaultMessage=\"We need all the 3 files\" /></p>\n                <Button>\n                    <Icon name=\"upload\" />\n                    <FormattedMessage id=\"dropzone.button.browse-files\" defaultMessage=\"Browse files\" />\n                </Button>\n            </div>\n            <Button primary disabled={true}>\n                <FormattedMessage id=\"dropzone.button.submit\" defaultMessage=\"Submit\" />\n            </Button>\n        </div>\n    );\n};","import React, {ReactNode, useRef, useState} from 'react';\nimport {Header, Icon, Message} from \"semantic-ui-react\";\nimport {FormattedMessage} from \"react-intl\";\nimport {InstructionsSection} from \"./instructions-section\";\nimport {UploadDropzone} from \"./upload-dropzone\";\n\nexport interface MessageState {\n    type: \"positive\" | \"negative\";\n    header: ReactNode;\n    text: ReactNode;\n}\n\nexport const App = () => {\n    const [message, setMessage] = useState<MessageState | null>(null);\n    const [messageVisible, setMessageVisible] = useState(false);\n\n    const instructionsRef = useRef<{ open: () => void }>(null);\n\n    // Function to show and fade out the message\n    const showMessage = (msg: MessageState) => {\n        setMessage(msg);\n        setMessageVisible(true);\n        // setTimeout(() => setMessageVisible(false), 15000);\n        // setTimeout(() => setMessage(null), 20000);\n    };\n\n    return (\n        <div className=\"body\">\n\n            {/* MESSAGES SECTION ----------------------------------------------------------------------------------- */}\n            {message && (\n                <div className={`message-container ${messageVisible ? \"expanded\" : \"collapsed\"}`}>\n                    <Message\n                        info\n                        positive={message.type === \"positive\"}\n                        negative={message.type === \"negative\"}\n                        onDismiss={() => setMessage(null)}>\n                            <Message.Header>{message.header}</Message.Header>\n                            <p>{message.text}</p>\n                    </Message>\n                </div>\n            )}\n\n            {/* HEADER SECTION ------------------------------------------------------------------------------------- */}\n            <Header as=\"h1\">\n                <FormattedMessage id=\"header.h1\" defaultMessage=\"Digitalize all your genealogy records into a family file\"/>\n            </Header>\n            <p>\n                <FormattedMessage id=\"header.p\" defaultMessage=\"It is (and will always be) free up to 50 relatives. Above 50 relatives, $0.5 per relative\"/>&nbsp;\n                <Icon name=\"credit card\"/>\n            </p>\n\n            {/* INSTRUCTIONS SECTION ------------------------------------------------------------------------------- */}\n            <InstructionsSection showMessage={showMessage} instructionsRef={instructionsRef}/>\n\n            {/* UPLOAD SECTION ------------------------------------------------------------------------------------- */}\n            <UploadDropzone/>\n\n        </div>\n    );\n}\n","import ReactDOM from 'react-dom/client';\nimport {App} from './app';\nimport './assets/styles/index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport messages_es from './i18n/literals/es.json';\nimport messages_pl from './i18n/literals/pl.json';\nimport {IntlProvider} from \"react-intl\";\n\nconst messages = {\n    es: messages_es,\n    pl: messages_pl\n};\n\nconst language = navigator.language && navigator.language.split(/[-_]/)[0];\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n    <IntlProvider locale={language} messages={messages[language]}>\n        <App/>\n    </IntlProvider>\n);\nexport default language"],"sourceRoot":""}