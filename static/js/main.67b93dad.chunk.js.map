{"version":3,"sources":["templates.tsx","instructions-popup.tsx","instructions-section.tsx","upload-dropzone.tsx","app.tsx","index.tsx"],"names":["resources","es","resources_es","pl","resources_pl","InstructionsPopup","forwardRef","_","ref","isOpen","setOpen","useState","isClicked","setIsClicked","currentIndex","setCurrentIndex","useEffect","nextSlide","totalCards","prevSlide","handleMouseDown","handleMouseUp","swipeHandlers","useSwipeable","onSwipedLeft","onSwipedRight","preventScrollOnSwipe","trackMouse","useImperativeHandle","open","_jsx","Modal","onClose","className","children","_jsxs","onClick","onMouseDown","onMouseUp","width","height","viewBox","d","stroke","strokeWidth","fill","strokeLinecap","strokeLinejoin","Header","as","Array","from","length","map","index","InstructionsSection","_ref","showMessage","instructionsRef","FormattedMessage","id","defaultMessage","_resources$language$t","_resources$language","templatesFileName","language","fetch","then","response","blob","_resources$language$i","_resources$language2","_resources$language$p","_resources$language3","_resources$language$r","_resources$language4","saveAs","type","header","text","_Fragment","catch","error","console","downloadTemplates","_instructionsRef$curr","current","UploadDropzone","files","setFiles","fileInputRef","useRef","handleFiles","newFiles","handleUploadClick","_fileInputRef$current","click","onDrop","event","preventDefault","dataTransfer","onDragOver","e","multiple","onChange","target","style","display","Button","Icon","name","primary","disabled","App","message","setMessage","messageVisible","setMessageVisible","Message","info","positive","negative","onDismiss","msg","messages","messages_es","messages_pl","navigator","split","ReactDOM","createRoot","document","getElementById","render","IntlProvider","locale"],"mappings":"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","file":"static/js/main.67b93dad.chunk.js","sourcesContent":["import {saveAs} from 'file-saver';\nimport {FormattedMessage} from 'react-intl';\nimport resources_es from \"./i18n/resources/es.json\";\nimport resources_pl from \"./i18n/resources/pl.json\";\nimport language from \"./index\";\nimport {MessageState} from \"./app\";\n\nconst resources = {\n    es: resources_es,\n    pl: resources_pl\n};\n\nexport const downloadTemplates = ({ showMessage }: { showMessage: (msg: MessageState) => void; }) => {\n    const templatesFileName = resources[language]?.[\"templates.zip\"] ?? \"templates.zip\";\n    const templatesFilePath = `${process.env.PUBLIC_URL}/templates/${language}/${templatesFileName}`;\n    fetch(templatesFilePath)\n        .then((response) => response.blob())\n        .then((blob) => {\n            saveAs(blob, templatesFileName);\n            showMessage({\n                type: \"positive\",\n                header: (\n                    <FormattedMessage\n                        id=\"instructions.templates.downloaded\"\n                        defaultMessage=\"Review your Downloads folder\"/>\n                ),\n                text: (\n                    <>\n                        <FormattedMessage\n                            id=\"instructions.templates.compressed\"\n                            defaultMessage=\"You will find the assets.templates in the compressed file:\"/>&nbsp;\n                        <span>{resources[language]?.[\"individuals.csv\"] ?? \"1-individuals.csv\"}</span>,&nbsp;\n                        <span>{resources[language]?.[\"parents.csv\"] ?? \"2-parents.csv\"}</span>,&nbsp;\n                        <span>{resources[language]?.[\"relationships.csv\"] ?? \"3-relationships.csv\"}</span>\n                    </>\n                )\n            });\n        })\n        .catch((error) => console.error(\"Download failed:\", error));\n};\n","import {forwardRef, useEffect, useImperativeHandle, useState} from \"react\";\nimport {Header, Icon, Modal, Portal} from \"semantic-ui-react\";\nimport { useSwipeable } from \"react-swipeable\";\n\nexport const InstructionsPopup = forwardRef((_, ref) => {\n    const [isOpen, setOpen] = useState<boolean>(false);\n    const [isClicked, setIsClicked] = useState(false);\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const totalCards = 4;\n\n    useEffect(() => {\n        if (isOpen) {\n            setCurrentIndex(0); // Reset slide index to 0 whenever the modal opens\n        }\n    }, [isOpen]);\n\n    const nextSlide = () => {\n        if (currentIndex < totalCards - 1) {\n            setCurrentIndex(currentIndex + 1);\n        }\n    };\n\n    const prevSlide = () => {\n        if (currentIndex > 0) {\n            setCurrentIndex(currentIndex - 1);\n        }\n    };\n\n    // Handle click feedback\n    const handleMouseDown = () => setIsClicked(true);\n    const handleMouseUp = () => setIsClicked(false);\n\n    const swipeHandlers = useSwipeable({\n        onSwipedLeft: nextSlide,    // Swipe left to go to the next slide\n        onSwipedRight: prevSlide,   // Swipe right to go back\n        preventScrollOnSwipe: true, // Prevents scrolling while swiping\n        trackMouse: true            // Allows swipe on desktop too\n    });\n\n    // Exposing the `open` method to parent component via the ref\n    useImperativeHandle(ref, () => ({\n        open: () => setOpen(true),\n    }));\n\n    return (\n        <Modal open={isOpen} onClose={() => setOpen(false)} className=\"instructions-popup\">\n            <div className=\"carousel-wrapper\" {...swipeHandlers}>\n                {/* Left Arrow */}\n                <div\n                    className={`arrow left-arrow ${currentIndex === 0 ? \"hidden\" : \"\"}`}\n                    onClick={prevSlide}\n                    onMouseDown={handleMouseDown}\n                    onMouseUp={handleMouseUp}>\n                    <svg width=\"80\" height=\"100%\" viewBox=\"0 0 24 48\">\n                        <path\n                            d=\"M15 4l-8 20 8 20\"\n                            stroke=\"lightgray\"\n                            strokeWidth=\"2\"\n                            fill=\"none\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"/>\n                    </svg>\n                </div>\n                {/* Main Content */}\n                <div className=\"carousel-content\">\n                    <Header as=\"h1\">Card {currentIndex + 1} Header</Header>\n                    <div className=\"carousel-body\">This is the content of card {currentIndex + 1}</div>\n                    <div className=\"dots-container\">\n                        {Array.from({ length: totalCards }).map((_, index) => (\n                            <span key={index} className={`dot ${index === currentIndex ? \"active\" : \"\"}`} />\n                        ))}\n                    </div>\n                </div>\n                {/* Right Arrow */}\n                {currentIndex < totalCards - 1 && (\n                    <div\n                        className={`arrow right-arrow ${currentIndex === totalCards - 1 ? \"hidden\" : \"\"}`}\n                        onClick={nextSlide}\n                        onMouseDown={handleMouseDown}\n                        onMouseUp={handleMouseUp}>\n                        <svg width=\"80\" height=\"100%\" viewBox=\"0 0 24 48\">\n                            <path\n                                d=\"M9 4l8 20-8 20\"\n                                stroke=\"lightgray\"\n                                strokeWidth=\"2\"\n                                fill=\"none\"\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"/>\n                        </svg>\n                    </div>\n                )}\n            </div>\n        </Modal>\n    );\n});\n","import React, {forwardRef, Ref, RefObject} from \"react\";\nimport {FormattedMessage} from \"react-intl\";\nimport {MessageState} from \"./app\";\nimport {downloadTemplates} from \"./templates\";\nimport {InstructionsPopup} from \"./instructions-popup\";\n\nexport const InstructionsSection = forwardRef(\n    (\n        { showMessage, instructionsRef}: {\n            showMessage: (msg: MessageState) => void;\n            instructionsRef: RefObject<{open: () => void}>;\n        },\n        ref: Ref<HTMLDivElement>\n    ) => {\n        return (\n        // INSTRUCTIONS SECTION ----------------------------------------------------------------------------------------\n        <div className=\"instructions-wrapper\" ref={ref}>\n                <h2><FormattedMessage id=\"instructions.h2\" defaultMessage=\"How the tool works\" /></h2>\n                <div className=\"instructions-container\">\n                    <div className=\"instruction-box\" onClick={() => downloadTemplates({ showMessage })}>\n                        <h3><FormattedMessage id=\"instructions.download.h3\" defaultMessage=\"Download\"/></h3>\n                        <p>\n                            <FormattedMessage\n                                id=\"instructions.download.p\"\n                                defaultMessage=\"Get here the assets.templates to fill-in. You need: individuals, parents, and relationships.\"/>\n                        </p>\n                    </div>\n                    <div className=\"instruction-box\" onClick={() => instructionsRef.current?.open()}>\n                        <h3><FormattedMessage id=\"instructions.fill-in.h3\" defaultMessage=\"Fill-in\" /></h3>\n                        <p>\n                            <FormattedMessage\n                                id=\"instructions.fill-in.p\"\n                                defaultMessage=\"Fill-in each template with the family records. Check here if you have doubts.\"/>\n                        </p>\n                    </div>\n                    <InstructionsPopup ref={instructionsRef} />\n                    <div className=\"instruction-box\">\n                        <h3><FormattedMessage id=\"instructions.collect.h3\" defaultMessage=\"Collect\" /></h3>\n                        <p>\n                            <FormattedMessage\n                                id=\"instructions.collect.p\"\n                                defaultMessage=\"Collect your family file so you can visualize it anywhere. Know no one? Check this.\"/>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n);\n","import React, {ChangeEvent, DragEvent, useRef, useState} from \"react\";\nimport {FormattedMessage} from \"react-intl\";\nimport {Button, Icon} from \"semantic-ui-react\";\n\nexport const UploadDropzone = () => {\n    const [files, setFiles] = useState<File[]>([]);\n    const fileInputRef = useRef<HTMLInputElement | null>(null);\n\n    const handleUploadClick = () => {\n        fileInputRef.current?.click();\n    };\n\n    const handleUploadDrop = (event: DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n        handleFiles(event.dataTransfer.files);\n    };\n\n    const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n        handleFiles(event.target.files);\n    };\n\n    const handleFiles = (newFiles: FileList | null) => {\n        if (newFiles) {\n            setFiles([...files, ...Array.from(newFiles)]);\n        }\n    };\n\n    return (\n        <div className=\"ui upload-container\">\n            <div\n                className=\"ui dropzone\"\n                onClick={handleUploadClick}\n                onDrop={handleUploadDrop}\n                onDragOver={(e) => e.preventDefault()}>\n                <input\n                    type=\"file\"\n                    multiple\n                    ref={fileInputRef}\n                    onChange={handleFileChange}\n                    style={{ display: \"none\" }}\n                />\n                <p>\n                    <FormattedMessage id=\"dropzone.p.drag-n-drop\" defaultMessage=\"Drag & drop here your filled assets.templates, or \" />\n                    <span><FormattedMessage id=\"dropzone.p.browse-them\" defaultMessage=\"browse them\" /></span>\n                </p>\n                <p><FormattedMessage id=\"dropzone.p.files-needed\" defaultMessage=\"We need all the 3 files\" /></p>\n                <Button>\n                    <Icon name=\"upload\" />\n                    <FormattedMessage id=\"dropzone.button.browse-files\" defaultMessage=\"Browse files\" />\n                </Button>\n            </div>\n            <Button primary disabled={true}>\n                <FormattedMessage id=\"dropzone.button.submit\" defaultMessage=\"Submit\" />\n            </Button>\n        </div>\n    );\n};","import React, {ReactNode, useRef, useState} from 'react';\nimport {Header, Icon, Message} from \"semantic-ui-react\";\nimport {FormattedMessage} from \"react-intl\";\nimport {InstructionsSection} from \"./instructions-section\";\nimport {UploadDropzone} from \"./upload-dropzone\";\n\nexport interface MessageState {\n    type: \"positive\" | \"negative\";\n    header: ReactNode;\n    text: ReactNode;\n}\n\nexport const App = () => {\n    const [message, setMessage] = useState<MessageState | null>(null);\n    const [messageVisible, setMessageVisible] = useState(false);\n\n    const instructionsRef = useRef<{ open: () => void }>(null);\n\n    // Function to show and fade out the message\n    const showMessage = (msg: MessageState) => {\n        setMessage(msg);\n        setMessageVisible(true);\n        // setTimeout(() => setMessageVisible(false), 15000);\n        // setTimeout(() => setMessage(null), 20000);\n    };\n\n    return (\n        <div className=\"body\">\n\n            {/* MESSAGES SECTION ----------------------------------------------------------------------------------- */}\n            {message && (\n                <div className={`message-container ${messageVisible ? \"expanded\" : \"collapsed\"}`}>\n                    <Message\n                        info\n                        positive={message.type === \"positive\"}\n                        negative={message.type === \"negative\"}\n                        onDismiss={() => setMessage(null)}>\n                            <Message.Header>{message.header}</Message.Header>\n                            <p>{message.text}</p>\n                    </Message>\n                </div>\n            )}\n\n            {/* HEADER SECTION ------------------------------------------------------------------------------------- */}\n            <Header as=\"h1\">\n                <FormattedMessage id=\"header.h1\" defaultMessage=\"Digitalize all your genealogy records into a family file\"/>\n            </Header>\n            <p>\n                <FormattedMessage id=\"header.p\" defaultMessage=\"It is (and will always be) free up to 50 relatives. Above 50 relatives, $0.5 per relative\"/>&nbsp;\n                <Icon name=\"credit card\"/>\n            </p>\n\n            {/* INSTRUCTIONS SECTION ------------------------------------------------------------------------------- */}\n            <InstructionsSection showMessage={showMessage} instructionsRef={instructionsRef}/>\n\n            {/* UPLOAD SECTION ------------------------------------------------------------------------------------- */}\n            <UploadDropzone/>\n\n        </div>\n    );\n}\n","import ReactDOM from 'react-dom/client';\nimport {App} from './app';\nimport './assets/styles/index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport messages_es from './i18n/literals/es.json';\nimport messages_pl from './i18n/literals/pl.json';\nimport {IntlProvider} from \"react-intl\";\n\nconst messages = {\n    es: messages_es,\n    pl: messages_pl\n};\n\nconst language = navigator.language && navigator.language.split(/[-_]/)[0];\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n    <IntlProvider locale={language} messages={messages[language]}>\n        <App/>\n    </IntlProvider>\n);\nexport default language"],"sourceRoot":""}