{"version":3,"sources":["instructions-popup-arrow.tsx","instructions-popup-content.tsx","instructions-popup.tsx","instructions-section.tsx","download-templates.tsx","upload-validate-schemas.tsx","upload-validate.tsx","upload-dropzone.tsx","app.tsx","index.tsx"],"names":["Arrow","_ref","direction","onClick","onMouseDown","onMouseUp","hidden","arrowClass","svgPath","_jsx","className","children","width","height","viewBox","d","stroke","strokeWidth","fill","strokeLinecap","strokeLinejoin","InstructionsContent","currentIndex","totalCards","_jsxs","Header","as","Array","from","length","map","_","index","InstructionsPopup","forwardRef","ref","isOpen","setOpen","useState","isClicked","setIsClicked","setCurrentIndex","useEffect","nextSlide","prevSlide","handleMouseDown","handleMouseUp","swipeHandlers","useSwipeable","onSwipedLeft","onSwipedRight","preventScrollOnSwipe","trackMouse","useImperativeHandle","open","Modal","onClose","InstructionsSection","showMessage","instructionsRef","FormattedMessage","id","defaultMessage","formatMessage","useIntl","templatesFileName","templatesFilePath","language","individualsFilename","parentsFilename","relationshipsFilename","fetch","then","response","blob","saveAs","type","header","text","_Fragment","catch","error","console","DownloadTemplates","_instructionsRef$curr","current","ValidationSchemas","split","validateFile","filename","content","parsedData","Papa","parse","skipEmptyLines","errors","rows","requiredColumns","headers","Object","keys","missingColumns","filter","col","includes","join","validateColumns","data","uploadValidation","files","expectedFilenames","validFilenames","file","name","validateFilenames","fileReadPromises","Promise","resolve","reader","FileReader","readAsText","onload","fileContent","result","validFile","onerror","all","results","validFiles","some","UploadDropzone","setMessage","setFiles","fileInputRef","useRef","HandleFiles","async","newFiles","Error","message","handleUploadClick","_fileInputRef$current","click","onDrop","event","preventDefault","dataTransfer","onDragOver","e","multiple","onChange","target","style","display","Button","Icon","primary","disabled","App","messageVisible","setMessageVisible","Message","info","positive","negative","onDismiss","msg","messages","es","messages_es","pl","messages_pl","navigator","ReactDOM","createRoot","document","getElementById","render","IntlProvider","locale"],"mappings":"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","file":"static/js/main.775b9bbd.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface ArrowProps {\n    direction: \"left\" | \"right\";\n    onClick: () => void;\n    onMouseDown: () => void;\n    onMouseUp: () => void;\n    hidden: boolean;\n}\n\nexport const Arrow: React.FC<ArrowProps> = ({ direction, onClick, onMouseDown, onMouseUp, hidden }) => {\n    const arrowClass = direction === \"left\" ? \"left-arrow\" : \"right-arrow\";\n    const svgPath = direction === \"left\" ? \"M15 4l-8 20 8 20\" : \"M9 4l8 20-8 20\";\n    return (\n        <div className={`arrow ${arrowClass} ${hidden ? \"hidden\" : \"\"}`}\n            onClick={onClick}\n            onMouseDown={onMouseDown}\n            onMouseUp={onMouseUp}>\n            <svg width=\"80\" height=\"100%\" viewBox=\"0 0 24 48\">\n                <path\n                    d={svgPath}\n                    stroke=\"lightgray\"\n                    strokeWidth=\"2\"\n                    fill=\"none\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                />\n            </svg>\n        </div>\n    );\n};","import React from \"react\";\nimport { Header } from \"semantic-ui-react\";\n\ninterface InstructionsContentProps {\n    currentIndex: number;\n    totalCards: number;\n}\n\nexport const InstructionsContent: React.FC<InstructionsContentProps> = ({ currentIndex, totalCards }) => {\n    return (\n        <div className=\"carousel-content\">\n            <Header as=\"h1\">Card {currentIndex + 1} Header</Header>\n            <div className=\"carousel-body\">\n                This is the content of card {currentIndex + 1}\n            </div>\n            <div className=\"dots-container\">\n                {Array.from({ length: totalCards }).map((_, index) => (\n                    <span\n                        key={index}\n                        className={`dot ${index === currentIndex ? \"active\" : \"\"}`}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n","import {forwardRef, useEffect, useImperativeHandle, useState} from \"react\";\nimport {Modal} from \"semantic-ui-react\";\nimport { useSwipeable } from \"react-swipeable\";\nimport {Arrow} from \"./instructions-popup-arrow\";\nimport {InstructionsContent} from \"./instructions-popup-content\";\n\nexport const InstructionsPopup = forwardRef((_, ref) => {\n    const [isOpen, setOpen] = useState<boolean>(false);\n    const [isClicked, setIsClicked] = useState(false);\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const totalCards = 4;\n\n    useEffect(() => {\n        if (isOpen) {\n            setCurrentIndex(0); // Reset slide index to 0 whenever the modal opens\n        }\n    }, [isOpen]);\n\n    const nextSlide = () => {\n        if (currentIndex < totalCards - 1) {\n            setCurrentIndex(currentIndex + 1);\n        }\n    };\n\n    const prevSlide = () => {\n        if (currentIndex > 0) {\n            setCurrentIndex(currentIndex - 1);\n        }\n    };\n\n    // Handle click feedback\n    const handleMouseDown = () => setIsClicked(true);\n    const handleMouseUp = () => setIsClicked(false);\n\n    const swipeHandlers = useSwipeable({\n        onSwipedLeft: nextSlide,    // swipe left to go to the next slide\n        onSwipedRight: prevSlide,   // swipe right to go back\n        preventScrollOnSwipe: true, // prevents scrolling while swiping\n        trackMouse: true            // allows swipe on desktop too\n    });\n\n    // Exposing the `open` method to parent component via the ref\n    useImperativeHandle(ref, () => ({\n        open: () => setOpen(true),\n    }));\n\n    return (\n        <Modal open={isOpen} onClose={() => setOpen(false)} className=\"instructions-popup\">\n            <div className=\"carousel-wrapper\" {...swipeHandlers}>\n                {/* Left Arrow */}\n                <Arrow direction=\"left\" onClick={prevSlide} onMouseDown={handleMouseDown} onMouseUp={handleMouseUp} hidden={currentIndex === 0}/>\n\n                {/* Main Content */}\n                <InstructionsContent currentIndex={currentIndex} totalCards={totalCards}/>\n\n                {/* Right Arrow */}\n                <Arrow direction=\"right\" onClick={nextSlide} onMouseDown={handleMouseDown} onMouseUp={handleMouseUp} hidden={currentIndex === totalCards - 1}/>\n            </div>\n        </Modal>\n    );\n});\n","import React, {forwardRef, Ref, RefObject} from \"react\";\nimport {FormattedMessage} from \"react-intl\";\nimport {MessageState} from \"./app\";\nimport {DownloadTemplates} from \"./download-templates\";\nimport {InstructionsPopup} from \"./instructions-popup\";\n\nexport const InstructionsSection = forwardRef(\n    (\n        { showMessage, instructionsRef}: {\n            showMessage: (msg: MessageState) => void;\n            instructionsRef: RefObject<{open: () => void}>;\n        },\n        ref: Ref<HTMLDivElement>\n    ) => {\n        return (\n        // INSTRUCTIONS SECTION ----------------------------------------------------------------------------------------\n        <div className=\"instructions-wrapper\" ref={ref}>\n                <h2><FormattedMessage id=\"instructions.h2\" defaultMessage=\"How the tool works\"/></h2>\n                <div className=\"instructions-container\">\n                    <div className=\"instruction-box\" onClick={() => DownloadTemplates({ showMessage })}>\n                        <h3><FormattedMessage id=\"instructions.download.h3\" defaultMessage=\"Download\"/></h3>\n                        <p>\n                            <FormattedMessage\n                                id=\"instructions.download.p\"\n                                defaultMessage=\"Get here the assets.templates to fill-in. You need: individuals, parents, and relationships.\"/>\n                        </p>\n                    </div>\n                    <div className=\"instruction-box\" onClick={() => instructionsRef.current?.open()}>\n                        <h3><FormattedMessage id=\"instructions.fill-in.h3\" defaultMessage=\"Fill-in\"/></h3>\n                        <p>\n                            <FormattedMessage\n                                id=\"instructions.fill-in.p\"\n                                defaultMessage=\"Fill-in each template with the family records. Check here if you have doubts.\"/>\n                        </p>\n                    </div>\n                    <InstructionsPopup ref={instructionsRef}/>\n                    <div className=\"instruction-box\">\n                        <h3><FormattedMessage id=\"instructions.collect.h3\" defaultMessage=\"Collect\"/></h3>\n                        <p>\n                            <FormattedMessage\n                                id=\"instructions.collect.p\"\n                                defaultMessage=\"Collect your family file so you can visualize it anywhere. Know no one? Check this.\"/>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n);\n","import {saveAs} from 'file-saver';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport language from \"./index\";\nimport {MessageState} from \"./app\";\n\nexport const DownloadTemplates = ({ showMessage }: { showMessage: (msg: MessageState) => void; }) => {\n    const { formatMessage } = useIntl();\n\n    const templatesFileName = formatMessage({ id: \"templates.zip\", defaultMessage: \"templates.zip\" });\n    const templatesFilePath = `${process.env.PUBLIC_URL}/templates/${language}/${templatesFileName}`;\n\n    const individualsFilename = formatMessage({ id: \"individuals.csv\", defaultMessage: \"1-individuals.csv\" });\n    const parentsFilename = formatMessage({ id: \"parents.csv\", defaultMessage: \"2-parents.csv\" });\n    const relationshipsFilename = formatMessage({ id: \"relationships.csv\", defaultMessage: \"3-relationships.csv\" });\n\n    fetch(templatesFilePath)\n        .then((response) => response.blob())\n        .then((blob) => {\n            saveAs(blob, templatesFileName);\n            showMessage({\n                type: \"positive\",\n                header: (\n                    <FormattedMessage\n                        id=\"instructions.templates.downloaded\"\n                        defaultMessage=\"Review your Downloads folder\"/>\n                ),\n                text: (\n                    <>\n                        <FormattedMessage\n                            id=\"instructions.templates.compressed\"\n                            defaultMessage=\"You will find the assets.templates in the compressed file:\"/>&nbsp;\n                        <span>{individualsFilename}</span>,&nbsp;\n                        <span>{parentsFilename}</span>,&nbsp;\n                        <span>{relationshipsFilename}</span>\n                    </>\n                )\n            });\n        })\n        .catch((error) => console.error(\"Download failed:\", error));\n};\n","import {useIntl} from \"react-intl\";\nimport Papa from \"papaparse\";\n\nexport const ValidationSchemas = () => {  // custom hook naming convention\n\n    // Keys: filenames\n    const individualsFilename = useIntl().formatMessage({ id: \"individuals.csv\", defaultMessage: \"1-individuals.csv\" });\n    const parentsFilename = useIntl().formatMessage({ id: \"parents.csv\", defaultMessage: \"2-parents.csv\" });\n    const relationshipsFilename = useIntl().formatMessage({ id: \"relationships.csv\", defaultMessage: \"3-relationships.csv\" });\n\n    // Values: columns\n    const individualsFileColumns = useIntl().formatMessage({\n        id: \"individuals.file.columns\",\n        defaultMessage: \"individual_id, name, surname1, surname2, nickname, gender, birth_date, birth_place, notes\"\n    }).split(\", \");\n    const parentsFileColumns = useIntl().formatMessage({\n        id: \"parents.file.columns\",\n        defaultMessage: \"individual_id, father_id, mother_id\"\n    }).split(\", \");\n    const relationshipsFileColumns = useIntl().formatMessage({\n        id: \"relationships.file.columns\",\n        defaultMessage: \"husband_id, wife_id, notes\"\n    }).split(\", \");\n\n    return {\n        individualsFilename: individualsFileColumns,\n        parentsFilename: parentsFileColumns,\n        relationshipsFilename: relationshipsFileColumns\n    };\n};\n\n\nexport function validateFile(filename: string, content: string) {\n    const parsedData = Papa.parse(content, { header: true, skipEmptyLines: true });\n    if (parsedData.errors.length) {\n        console.error(\"CSV loading errors:\", parsedData.errors);\n        return false;\n    }\n    const rows = parsedData.data as Record<string, string>[];\n    return validateColumns(filename, rows, ValidationSchemas()[filename])\n}\n\nfunction validateColumns(filename: string, rows: Record<string, string>[], requiredColumns: string[]) {\n    // Check for missing columns\n    const headers = Object.keys(rows[0]);\n    const missingColumns = requiredColumns.filter(col => !headers.includes(col));\n    if (missingColumns.length) {\n        const error = `${filename}: the following required columns are missing: ${missingColumns.join(\", \")}`\n        console.error(error);\n        return false;\n    }\n    return true;\n}\n","import {validateFile, ValidationSchemas} from \"./upload-validate-schemas\";\n\nexport const uploadValidation = (files: FileList | null) => {\n    if (!files) return null\n\n    // Validate file names\n    const expectedFilenames = Object.keys(ValidationSchemas())\n    if (!validateFilenames(Array.from(files), expectedFilenames)) {\n        return null  // TODO: reject(new Error(`Invalid file format: ${file.name}`));\n    }\n\n    // Basic schema validation\n    const fileReadPromises = Array.from(files).map(file => {\n        return new Promise<File | null>((resolve) => {\n            const reader = new FileReader();\n            reader.readAsText(file, \"UTF-8\");\n            reader.onload = () => {\n                const fileContent = reader.result as string;\n                const validFile = validateFile(file.name, fileContent);\n                if (validFile) {\n                    resolve(file);\n                } else {\n                    resolve(null);\n                }\n            };\n            reader.onerror = () => {\n                console.error(\"Error reading file:\", file.name);\n                // setErrors([\"Error reading file:\" + file.name])  TODO: add to errors bundle\n                resolve(null); // Resolve as null to exclude invalid files\n            };\n        });\n    });\n\n    // Wait for all file validations to complete\n    Promise.all(fileReadPromises).then(results => {\n        const validFiles = results.filter((file): file is File => file !== null);\n        const invalidFiles = Array.from(files)\n            .filter((file: File) => !validFiles.some(validFile => validFile.name === file.name))\n            .map(file => `'${file.name}'`)\n            .join(\", \");\n        if (invalidFiles) {\n            // setErrors([\"Files had errors. You can check them in the browser console\"])  TODO: add to errors bundle\n        }\n        // Validate number of files\n        if (!validFiles || validFiles.length < 3 || validFiles.length > 3) {\n            console.error(\"Wrong number of uploaded files...\")\n            return null  // TODO: reject(new Error(`Invalid file format: ${file.name}`));\n        }\n        // (event.target as HTMLInputElement).value = ''; // Reset the file input\n        return validFiles\n    });\n}\n\nfunction validateFilenames(files: File[], validFilenames: string[]): boolean {\n    for (const file of files) {\n        const filename = file.name;\n        if (!validFilenames.includes(filename)) {\n            console.error(`Invalid filename: ${filename}`);\n            return false;\n        }\n    }\n    return true;\n}\n","import React, {ChangeEvent, DragEvent, useRef, useState} from \"react\";\nimport {FormattedMessage} from \"react-intl\";\nimport {Button, Icon} from \"semantic-ui-react\";\nimport {uploadValidation} from \"./upload-validate\";\nimport {MessageState} from \"./app\";\n\nexport const UploadDropzone = ({ setMessage }: { setMessage: (message: MessageState | null) => void }) => {\n    const [files, setFiles] = useState<File[]>([]);\n    const fileInputRef = useRef<HTMLInputElement | null>(null);\n\n    const handleUploadClick = () => {\n        fileInputRef.current?.click();\n    };\n\n    const handleUploadDrop = async (event: DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n        await HandleFiles(event.dataTransfer.files);\n    };\n\n    const handleFileChange = async (event: ChangeEvent<HTMLInputElement>) => {\n        await HandleFiles(event.target.files);\n    };\n\n    const HandleFiles = async (newFiles: FileList | null) => {\n        try {\n            if (newFiles) {\n                const validFiles = uploadValidation(newFiles);\n                if (validFiles) {\n                    setFiles([...files, ...validFiles]);  // add to previous\n                }\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                setMessage({ type: \"negative\", header: \"File Upload Error\", text: error.message });\n            }\n        }\n    };\n\n    return (\n        <div className=\"ui upload-container\">\n            <div\n                className=\"ui dropzone\"\n                onClick={handleUploadClick}\n                onDrop={handleUploadDrop}\n                onDragOver={(e) => e.preventDefault()}>\n                <input type=\"file\" multiple ref={fileInputRef} onChange={handleFileChange} style={{ display: \"none\" }}/>\n                <p>\n                    <FormattedMessage id=\"dropzone.p.drag-n-drop\" defaultMessage=\"Drag & drop here your filled assets.templates, or \"/>\n                    <span><FormattedMessage id=\"dropzone.p.browse-them\" defaultMessage=\"browse them\"/></span>\n                </p>\n                <p><FormattedMessage id=\"dropzone.p.files-needed\" defaultMessage=\"We need all the 3 files\"/></p>\n                <Button>\n                    <Icon name=\"upload\"/>\n                    <FormattedMessage id=\"dropzone.button.browse-files\" defaultMessage=\"Browse files\"/>\n                </Button>\n            </div>\n            <Button primary disabled={true}>\n                <FormattedMessage id=\"dropzone.button.submit\" defaultMessage=\"Submit\"/>\n            </Button>\n        </div>\n    );\n};","import React, {ReactNode, useRef, useState} from 'react';\nimport {Header, Icon, Message} from \"semantic-ui-react\";\nimport {FormattedMessage} from \"react-intl\";\nimport {InstructionsSection} from \"./instructions-section\";\nimport {UploadDropzone} from \"./upload-dropzone\";\n\nexport interface MessageState {\n    type: \"positive\" | \"negative\";\n    header: ReactNode;\n    text: ReactNode;\n}\n\nexport const App = () => {\n    const [message, setMessage] = useState<MessageState | null>(null);\n    const [messageVisible, setMessageVisible] = useState(false);\n\n    const instructionsRef = useRef<{ open: () => void }>(null);\n\n    // Function to show and fade out the message\n    const showMessage = (msg: MessageState) => {\n        setMessage(msg);\n        setMessageVisible(true);\n    };\n\n    return (\n        <div className=\"body\">\n\n            {/* MESSAGES SECTION ----------------------------------------------------------------------------------- */}\n            {message && (\n                <div className={`message-container ${messageVisible ? \"expanded\" : \"collapsed\"}`}>\n                    <Message\n                        info\n                        positive={message.type === \"positive\"}\n                        negative={message.type === \"negative\"}\n                        onDismiss={() => setMessage(null)}>\n                            <Message.Header>{message.header}</Message.Header>\n                            <p>{message.text}</p>\n                    </Message>\n                </div>\n            )}\n\n            {/* HEADER SECTION ------------------------------------------------------------------------------------- */}\n            <Header as=\"h1\">\n                <FormattedMessage id=\"header.h1\" defaultMessage=\"Digitalize all your genealogy records into a family file\"/>\n            </Header>\n            <p>\n                <FormattedMessage id=\"header.p\" defaultMessage=\"It is (and will always be) free up to 50 relatives. Above 50 relatives, $0.5 per relative\"/>&nbsp;\n                <Icon name=\"credit card\"/>\n            </p>\n\n            {/* INSTRUCTIONS SECTION ------------------------------------------------------------------------------- */}\n            <InstructionsSection showMessage={showMessage} instructionsRef={instructionsRef}/>\n\n            {/* UPLOAD SECTION ------------------------------------------------------------------------------------- */}\n            <UploadDropzone setMessage={setMessage}/>\n\n        </div>\n    );\n}\n","import ReactDOM from 'react-dom/client';\nimport {App} from './app';\nimport './assets/styles/index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport messages_es from './i18n/literals/es.json';\nimport messages_pl from './i18n/literals/pl.json';\nimport {IntlProvider} from \"react-intl\";\n\nconst messages = {\n    es: messages_es,\n    pl: messages_pl\n};\n\nconst language = navigator.language && navigator.language.split(/[-_]/)[0];\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n    <IntlProvider locale={language} messages={messages[language]}>\n        <App/>\n    </IntlProvider>\n);\nexport default language"],"sourceRoot":""}