{"version":3,"sources":["templates.tsx","instructions-popup.tsx","instructions-section.tsx","upload-dropzone.tsx","app.tsx","index.tsx"],"names":["resources","es","resources_es","pl","resources_pl","InstructionsPopup","forwardRef","_","ref","isOpen","setOpen","useState","useImperativeHandle","open","_jsx","Portal","onClose","children","className","InstructionsSection","_ref","showMessage","instructionsRef","_jsxs","FormattedMessage","id","defaultMessage","onClick","_resources$language$t","_resources$language","templatesFileName","language","fetch","then","response","blob","_resources$language$i","_resources$language2","_resources$language$p","_resources$language3","_resources$language$r","_resources$language4","saveAs","type","header","text","_Fragment","catch","error","console","downloadTemplates","_instructionsRef$curr","current","UploadDropzone","files","setFiles","fileInputRef","useRef","handleFiles","newFiles","Array","from","handleUploadClick","_fileInputRef$current","click","onDrop","event","preventDefault","dataTransfer","onDragOver","e","multiple","onChange","target","style","display","Button","Icon","name","primary","disabled","App","message","setMessage","messageVisible","setMessageVisible","Message","info","positive","negative","onDismiss","Header","as","msg","messages","messages_es","messages_pl","navigator","split","ReactDOM","createRoot","document","getElementById","render","IntlProvider","locale"],"mappings":"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","file":"static/js/main.dd4dfec9.chunk.js","sourcesContent":["import {saveAs} from 'file-saver';\nimport {FormattedMessage} from 'react-intl';\nimport resources_es from \"./i18n/resources/es.json\";\nimport resources_pl from \"./i18n/resources/pl.json\";\nimport language from \"./index\";\nimport {MessageState} from \"./app\";\n\nconst resources = {\n    es: resources_es,\n    pl: resources_pl\n};\n\nexport const downloadTemplates = ({ showMessage }: { showMessage: (msg: MessageState) => void; }) => {\n    const templatesFileName = resources[language]?.[\"templates.zip\"] ?? \"templates.zip\";\n    const templatesFilePath = `${process.env.PUBLIC_URL}/templates/${language}/${templatesFileName}`;\n    fetch(templatesFilePath)\n        .then((response) => response.blob())\n        .then((blob) => {\n            saveAs(blob, templatesFileName);\n            showMessage({\n                type: \"positive\",\n                header: (\n                    <FormattedMessage\n                        id=\"instructions.templates.downloaded\"\n                        defaultMessage=\"Review your Downloads folder\"/>\n                ),\n                text: (\n                    <>\n                        <FormattedMessage\n                            id=\"instructions.templates.compressed\"\n                            defaultMessage=\"You will find the assets.templates in the compressed file:\"/>&nbsp;\n                        <span>{resources[language]?.[\"individuals.csv\"] ?? \"1-individuals.csv\"}</span>,&nbsp;\n                        <span>{resources[language]?.[\"parents.csv\"] ?? \"2-parents.csv\"}</span>,&nbsp;\n                        <span>{resources[language]?.[\"relationships.csv\"] ?? \"3-relationships.csv\"}</span>\n                    </>\n                )\n            });\n        })\n        .catch((error) => console.error(\"Download failed:\", error));\n};\n","import {forwardRef, useImperativeHandle, useState} from \"react\";\nimport {Portal} from \"semantic-ui-react\";\n\nexport const InstructionsPopup = forwardRef((_, ref) => {\n    const [isOpen, setOpen] = useState<boolean>(false);\n\n    // Exposing the `open` method to parent component via the ref\n    useImperativeHandle(ref, () => ({\n        open: () => setOpen(true),\n    }));\n\n    return (\n        <Portal open={isOpen} onClose={() => setOpen(false)}>\n            <div className=\"instructions-popup\">\n                HELLO\n            </div>\n        </Portal>\n    );\n});\n","import React, {forwardRef, Ref, RefObject} from \"react\";\nimport {FormattedMessage} from \"react-intl\";\nimport {MessageState} from \"./app\";\nimport {downloadTemplates} from \"./templates\";\nimport {InstructionsPopup} from \"./instructions-popup\";\n\nexport const InstructionsSection = forwardRef(\n    (\n        { showMessage, instructionsRef}: {\n            showMessage: (msg: MessageState) => void;\n            instructionsRef: RefObject<{open: () => void}>;\n        },\n        ref: Ref<HTMLDivElement>\n    ) => {\n        return (\n        // INSTRUCTIONS SECTION ----------------------------------------------------------------------------------------\n        <div className=\"instructions-wrapper\" ref={ref}>\n                <h2><FormattedMessage id=\"instructions.h2\" defaultMessage=\"How the tool works\" /></h2>\n                <div className=\"instructions-container\">\n                    <div className=\"instruction-box\" onClick={() => downloadTemplates({ showMessage })}>\n                        <h3><FormattedMessage id=\"instructions.download.h3\" defaultMessage=\"Download\"/></h3>\n                        <p>\n                            <FormattedMessage\n                                id=\"instructions.download.p\"\n                                defaultMessage=\"Get here the assets.templates to fill-in. You need: individuals, parents, and relationships.\"/>\n                        </p>\n                    </div>\n                    <div className=\"instruction-box\" onClick={() => instructionsRef.current?.open()}>\n                        <h3><FormattedMessage id=\"instructions.fill-in.h3\" defaultMessage=\"Fill-in\" /></h3>\n                        <p>\n                            <FormattedMessage\n                                id=\"instructions.fill-in.p\"\n                                defaultMessage=\"Fill-in each template with the family records. Check here if you have doubts.\"/>\n                        </p>\n                    </div>\n                    <InstructionsPopup ref={instructionsRef} />\n                    <div className=\"instruction-box\">\n                        <h3><FormattedMessage id=\"instructions.collect.h3\" defaultMessage=\"Collect\" /></h3>\n                        <p>\n                            <FormattedMessage\n                                id=\"instructions.collect.p\"\n                                defaultMessage=\"Collect your family file so you can visualize it anywhere. Know no one? Check this.\"/>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n);\n","import React, {ChangeEvent, DragEvent, useRef, useState} from \"react\";\nimport {FormattedMessage} from \"react-intl\";\nimport {Button, Icon} from \"semantic-ui-react\";\n\nexport const UploadDropzone = () => {\n    const [files, setFiles] = useState<File[]>([]);\n    const fileInputRef = useRef<HTMLInputElement | null>(null);\n\n    const handleUploadClick = () => {\n        fileInputRef.current?.click();\n    };\n\n    const handleUploadDrop = (event: DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n        handleFiles(event.dataTransfer.files);\n    };\n\n    const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n        handleFiles(event.target.files);\n    };\n\n    const handleFiles = (newFiles: FileList | null) => {\n        if (newFiles) {\n            setFiles([...files, ...Array.from(newFiles)]);\n        }\n    };\n\n    return (\n        <div className=\"ui upload-container\">\n            <div\n                className=\"ui dropzone\"\n                onClick={handleUploadClick}\n                onDrop={handleUploadDrop}\n                onDragOver={(e) => e.preventDefault()}>\n                <input\n                    type=\"file\"\n                    multiple\n                    ref={fileInputRef}\n                    onChange={handleFileChange}\n                    style={{ display: \"none\" }}\n                />\n                <p>\n                    <FormattedMessage id=\"dropzone.p.drag-n-drop\" defaultMessage=\"Drag & drop here your filled assets.templates, or \" />\n                    <span><FormattedMessage id=\"dropzone.p.browse-them\" defaultMessage=\"browse them\" /></span>\n                </p>\n                <p><FormattedMessage id=\"dropzone.p.files-needed\" defaultMessage=\"We need all the 3 files\" /></p>\n                <Button>\n                    <Icon name=\"upload\" />\n                    <FormattedMessage id=\"dropzone.button.browse-files\" defaultMessage=\"Browse files\" />\n                </Button>\n            </div>\n            <Button primary disabled={true}>\n                <FormattedMessage id=\"dropzone.button.submit\" defaultMessage=\"Submit\" />\n            </Button>\n        </div>\n    );\n};","import React, {ReactNode, useRef, useState} from 'react';\nimport {Header, Icon, Message} from \"semantic-ui-react\";\nimport {FormattedMessage} from \"react-intl\";\nimport {InstructionsSection} from \"./instructions-section\";\nimport {UploadDropzone} from \"./upload-dropzone\";\n\nexport interface MessageState {\n    type: \"positive\" | \"negative\";\n    header: ReactNode;\n    text: ReactNode;\n}\n\nexport const App = () => {\n    const [message, setMessage] = useState<MessageState | null>(null);\n    const [messageVisible, setMessageVisible] = useState(false);\n\n    const instructionsRef = useRef<{ open: () => void }>(null);\n\n    // Function to show and fade out the message\n    const showMessage = (msg: MessageState) => {\n        setMessage(msg);\n        setMessageVisible(true);\n        // setTimeout(() => setMessageVisible(false), 15000);\n        // setTimeout(() => setMessage(null), 20000);\n    };\n\n    return (\n        <div className=\"body\">\n\n            {/* MESSAGES SECTION ----------------------------------------------------------------------------------- */}\n            {message && (\n                <div className={`message-container ${messageVisible ? \"expanded\" : \"collapsed\"}`}>\n                    <Message\n                        info\n                        positive={message.type === \"positive\"}\n                        negative={message.type === \"negative\"}\n                        onDismiss={() => setMessage(null)}>\n                            <Message.Header>{message.header}</Message.Header>\n                            <p>{message.text}</p>\n                    </Message>\n                </div>\n            )}\n\n            {/* HEADER SECTION ------------------------------------------------------------------------------------- */}\n            <Header as='h1'>\n                <FormattedMessage id=\"header.h1\" defaultMessage=\"Digitalize all your genealogy records into a family file\"/>\n            </Header>\n            <p>\n                <FormattedMessage id=\"header.p\" defaultMessage=\"It is (and will always be) free up to 50 relatives. Above 50 relatives, $0.5 per relative\"/>&nbsp;\n                <Icon name=\"credit card\"/>\n            </p>\n\n            {/* INSTRUCTIONS SECTION ------------------------------------------------------------------------------- */}\n            <InstructionsSection showMessage={showMessage} instructionsRef={instructionsRef}/>\n\n            {/* UPLOAD SECTION ------------------------------------------------------------------------------------- */}\n            <UploadDropzone/>\n\n        </div>\n    );\n}\n","import ReactDOM from 'react-dom/client';\nimport {App} from './app';\nimport './assets/styles/index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport messages_es from './i18n/literals/es.json';\nimport messages_pl from './i18n/literals/pl.json';\nimport {IntlProvider} from \"react-intl\";\n\nconst messages = {\n    es: messages_es,\n    pl: messages_pl\n};\n\nconst language = navigator.language && navigator.language.split(/[-_]/)[0];\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n    <IntlProvider locale={language} messages={messages[language]}>\n        <App/>\n    </IntlProvider>\n);\nexport default language"],"sourceRoot":""}